{"ast":null,"code":"import * as yup from \"yup\";\nimport \"yup-phone\";\n\n// const passwordRules = \"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$\";\nexport const loginSchema = yup.object().shape({\n  email: yup.string().email(\"Please enter a valid email\").required(\"The username can not be blank\"),\n  password: yup.string().required(\"The password is required\")\n});\nconst gender = [\"Male\", \"Female\"];\nconst schoollevel = [\"Graduate\", \"Undergrate\"];\nconst Status = [\"Returning\", \"New to Hall\"];\nconst NewtoHall = [\"Yes\", \"No\"];\nconst Countries = [\"Jamaica\", \"Trindad and Tobago\", \"Barbados\"];\nconst cluster = [1, 2, 3, 4, 5, 6, 7, 8];\nexport const studentSchema = yup.object().shape({\n  cluster: yup.number().required(\"A cluster is required\"),\n  studentid: yup.number().positive().min(5).max(10).required(\"Please enter a student Id\"),\n  roomnumber: yup.string().min(4).max(4).required(\"A room number is required\"),\n  firstname: yup.string().min(5).max(50).required(\"First name of the student is required\"),\n  middlename: yup.string().min(5).max(50),\n  lastname: yup.string().min(5).max(50).required(\"Last name is required\"),\n  dob: yup.date().default(() => new Date()),\n  sex: yup.string().required(\"Please enter a gender\").oneOf(gender),\n  address: yup.string().min(5).max(50),\n  address1: yup.string().min(5).max(50),\n  parish: yup.string().required(\"A parish is required\"),\n  phone: yup.string(),\n  email: yup.string().email().required(\"A email is required\"),\n  yearsinhall: yup.string().min(0).max(10).required(\"Number of years on hall is required\"),\n  level: yup.string().required(\"Please enter a level\").oneOf(schoollevel),\n  major: yup.string().required(\"A major is required\"),\n  faculty: yup.string().required(\"A faculty is required\"),\n  year: yup.string().required(\"Please enter the year of the student\"),\n  status: yup.string().oneOf(Status).required(\"Please enter the status of the student\"),\n  newtohall: yup.string().oneOf(NewtoHall).required(\"Please state if the student is new to the hall\"),\n  territory: yup.string().oneOf(Countries).required(\"Please enter the territory\")\n});","map":{"version":3,"names":["yup","loginSchema","object","shape","email","string","required","password","gender","schoollevel","Status","NewtoHall","Countries","cluster","studentSchema","number","studentid","positive","min","max","roomnumber","firstname","middlename","lastname","dob","date","default","Date","sex","oneOf","address","address1","parish","phone","yearsinhall","level","major","faculty","year","status","newtohall","territory"],"sources":["/Users/tywayne/Desktop/reactdev/sms-frontend-final/src/components/schemas/index.js"],"sourcesContent":["import * as yup from \"yup\"\nimport \"yup-phone\"\n\n// const passwordRules = \"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$\";\nexport const loginSchema = yup.object().shape({\n    email: yup.string().email(\"Please enter a valid email\").required(\"The username can not be blank\"),\n    password: yup.string().required(\"The password is required\")\n})\n\nconst gender = [\"Male\",\"Female\"]\nconst schoollevel = [\"Graduate\",\"Undergrate\"]\nconst Status = [\"Returning\",\"New to Hall\"]\nconst NewtoHall = [\"Yes\", \"No\"]\nconst Countries = [\"Jamaica\",\"Trindad and Tobago\",\"Barbados\"]\nconst cluster = [1,2,3,4,5,6,7,8]\n\nexport const studentSchema = yup.object().shape({\n    cluster: yup.number().required(\"A cluster is required\"),\n    studentid: yup.number().positive().min(5).max(10).required(\"Please enter a student Id\"),\n    roomnumber: yup.string().min(4).max(4).required(\"A room number is required\"),\n    firstname: yup.string().min(5).max(50).required(\"First name of the student is required\"),\n    middlename: yup.string().min(5).max(50),\n    lastname: yup.string().min(5).max(50).required(\"Last name is required\"),\n    dob: yup.date().default(()=> new Date()),\n    sex:yup.string().required(\"Please enter a gender\").oneOf(gender),\n    address: yup.string().min(5).max(50),\n    address1: yup.string().min(5).max(50),\n    parish: yup.string().required(\"A parish is required\"),\n    phone: yup.string(),\n    email:yup.string().email().required(\"A email is required\"),\n    yearsinhall: yup.string().min(0).max(10).required(\"Number of years on hall is required\"),\n    level:yup.string().required(\"Please enter a level\").oneOf(schoollevel),\n    major:yup.string().required(\"A major is required\"),\n    faculty: yup.string().required(\"A faculty is required\"),\n    year: yup.string().required(\"Please enter the year of the student\"),\n    status: yup.string().oneOf(Status).required(\"Please enter the status of the student\"),\n    newtohall: yup.string().oneOf(NewtoHall).required(\"Please state if the student is new to the hall\"),\n    territory: yup.string().oneOf(Countries).required(\"Please enter the territory\")  \n})\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}