{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport Metadata from './metadata.js';\nimport isPossibleNumber from './isPossibleNumber_.js';\nimport isValidNumber from './validate_.js';\nimport isValidNumberForRegion from './isValidNumberForRegion_.js';\nimport getNumberType from './helpers/getNumberType.js';\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js';\nimport formatNumber from './format_.js';\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;\nvar PhoneNumber = /*#__PURE__*/function () {\n  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {\n    _classCallCheck(this, PhoneNumber);\n    if (!countryCallingCode) {\n      throw new TypeError('`country` or `countryCallingCode` not passed');\n    }\n    if (!nationalNumber) {\n      throw new TypeError('`nationalNumber` not passed');\n    }\n    if (!metadata) {\n      throw new TypeError('`metadata` not passed');\n    }\n    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.\n    // Also store the country code as `.country`.\n\n    if (isCountryCode(countryCallingCode)) {\n      this.country = countryCallingCode;\n      _metadata.country(countryCallingCode);\n      countryCallingCode = _metadata.countryCallingCode();\n    } else {\n      /* istanbul ignore if */\n      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n        if (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\n          this.country = '001';\n        }\n      }\n    }\n    this.countryCallingCode = countryCallingCode;\n    this.nationalNumber = nationalNumber;\n    this.number = '+' + this.countryCallingCode + this.nationalNumber;\n    this.metadata = metadata;\n  }\n  _createClass(PhoneNumber, [{\n    key: \"setExt\",\n    value: function setExt(ext) {\n      this.ext = ext;\n    }\n  }, {\n    key: \"getPossibleCountries\",\n    value: function getPossibleCountries() {\n      if (this.country) {\n        return [this.country];\n      }\n      return getPossibleCountriesForNumber(this.countryCallingCode, this.nationalNumber, this.metadata);\n    }\n  }, {\n    key: \"isPossible\",\n    value: function isPossible() {\n      return isPossibleNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      return isValidNumber(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"isNonGeographic\",\n    value: function isNonGeographic() {\n      var metadata = new Metadata(this.metadata);\n      return metadata.isNonGeographicCallingCode(this.countryCallingCode);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(phoneNumber) {\n      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;\n    } // // Is just an alias for `this.isValid() && this.country === country`.\n    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n    // isValidForRegion(country) {\n    // \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\n    // }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return getNumberType(this, {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"format\",\n    value: function format(_format, options) {\n      return formatNumber(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {\n        v2: true\n      }) : {\n        v2: true\n      }, this.metadata);\n    }\n  }, {\n    key: \"formatNational\",\n    value: function formatNational(options) {\n      return this.format('NATIONAL', options);\n    }\n  }, {\n    key: \"formatInternational\",\n    value: function formatInternational(options) {\n      return this.format('INTERNATIONAL', options);\n    }\n  }, {\n    key: \"getURI\",\n    value: function getURI(options) {\n      return this.format('RFC3966', options);\n    }\n  }]);\n  return PhoneNumber;\n}();\nexport { PhoneNumber as default };\nvar isCountryCode = function isCountryCode(value) {\n  return /^[A-Z]{2}$/.test(value);\n};","map":{"version":3,"names":["Metadata","isPossibleNumber","isValidNumber","isValidNumberForRegion","getNumberType","getPossibleCountriesForNumber","formatNumber","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","countryCallingCode","nationalNumber","metadata","_classCallCheck","TypeError","_metadata","isCountryCode","country","isNonGeographicCallingCode","number","setExt","ext","getPossibleCountries","isPossible","v2","isValid","isNonGeographic","isEqual","phoneNumber","getType","format","_format","options","_objectSpread","formatNational","formatInternational","getURI","value","test"],"sources":["/Users/tywayne/Desktop/reactdev/sms-frontend/frontend/node_modules/libphonenumber-js/source/PhoneNumber.js"],"sourcesContent":["import Metadata from './metadata.js'\r\nimport isPossibleNumber from './isPossibleNumber_.js'\r\nimport isValidNumber from './validate_.js'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport formatNumber from './format_.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tif (!metadata) {\r\n\t\t\tthrow new TypeError('`metadata` not passed')\r\n\t\t}\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\t\tthis.country = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}