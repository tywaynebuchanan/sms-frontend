'use strict';

var React = require('react');
var Cookies = require('js-cookie');
var reactRouterDom = require('react-router-dom');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Auth Context
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var AuthContext = React__namespace.createContext(null);
var AuthContextConsumer = AuthContext.Consumer;

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * @class TokenObject
 *
 * Stores and retrieve Token
 */
var TokenObject = /** @class */ (function () {
    /**
     * TokenObject - Stores, retrieve and process tokens
     *
     * @param authStorageName - Name of the Token,
     * which will store the Authorization Token
     *
     * @param authStorageType - Type of the auth Storage, `
     * cookie` or `localstorage`
     *
     * @param refreshTokenName - Name of the refresh Token,
     * if `undefined`, then no refreshToken feature is using
     *
     * @param cookieDomain - domain name for the Cookies,
     * only applicable when `authStorageType` is `cookie`
     *
     * @param cookieSecure - cookies are secure or not,
     * only applicable when `authStorageType` is `cookie`
     *
     * @constructor
     */
    function TokenObject(authStorageName, authStorageType, refreshTokenName, cookieDomain, cookieSecure) {
        this.authStorageType = authStorageType;
        this.authStorageName = authStorageName;
        this.authTimeStorageName = "".concat(authStorageName, "_storage");
        this.stateStorageName = "".concat(authStorageName, "_state");
        this.refreshTokenName = refreshTokenName;
        this.cookieDomain = cookieDomain;
        this.cookieSecure = cookieSecure;
        this.authStorageTypeName = "".concat(this.authStorageName, "_type");
        this.isUsingRefreshToken = !!this.refreshTokenName;
        this.refreshTokenTimeName = this.refreshTokenName ?
            "".concat(this.refreshTokenName, "_time") : null;
    }
    /**
     * Get the Initial Tokens and states
     * Called externally in `AuthProvider`
     * when the Application is bootstrapping or refreshed
     *
     * If the `authStorageType` is `cookie`,
     * get information from `initialCookieToken()` function
     *
     * If the `authTokenType` is `localStorage`
     * get information from `initialLSToken()` function
     *
     * @returns AuthKitStateInterface
     */
    TokenObject.prototype.initialToken = function () {
        if (this.authStorageType === 'cookie') {
            return this.initialCookieToken_();
        }
        else {
            return this.initialLSToken_();
        }
    };
    /**
     * Get the Initial Token from Cookies
     * Called internally by `initialToken` method
     *
     * If the `authStorageType` is `cookie`
     * then this function is called
     * And returns the Tokens and states Stored in all 4 cookies
     *
     * @returns AuthKitStateInterface
     */
    TokenObject.prototype.initialCookieToken_ = function () {
        var authToken = Cookies.get(this.authStorageName);
        var authTokenType = Cookies.get(this.authStorageTypeName);
        var authTokenTime = Cookies.get(this.authTimeStorageName);
        var stateCookie = Cookies.get(this.stateStorageName);
        var refreshToken = this.isUsingRefreshToken &&
            this.refreshTokenName != null ? Cookies.get(this.refreshTokenName) : null;
        var refreshTokenTime = this.isUsingRefreshToken &&
            this.refreshTokenTimeName != null ?
            Cookies.get(this.refreshTokenTimeName) : null;
        return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);
    };
    /**
     * Get the Initial Token from LocalStorage
     * Called internally by `initialToken` method
     *
     * If the `authStorageType` is `localstorage`
     * then this function is called
     * And returns the Tokens and states Stored in all 4 cookies
     *
     * @returns AuthKitStateInterface
     */
    TokenObject.prototype.initialLSToken_ = function () {
        var authToken = localStorage.getItem(this.authStorageName);
        var authTokenType = localStorage.getItem(this.authStorageTypeName);
        var authTokenTime = localStorage.getItem(this.authTimeStorageName);
        var stateCookie = localStorage.getItem(this.stateStorageName);
        var refreshToken = this.isUsingRefreshToken &&
            this.refreshTokenName != null ?
            localStorage.getItem(this.refreshTokenName) : null;
        var refreshTokenTime = this.isUsingRefreshToken &&
            this.refreshTokenTimeName != null ?
            localStorage.getItem(this.refreshTokenTimeName) : null;
        return this.checkTokenExist(authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime);
    };
    /**
     * Check if the Initial token is valid or not,
     * Called Internally by `initialCookieToken_()` and `initialLSToken_()`
     *
     * If the tokens are valid,
     * then it response TokenObject with auth Information
     * Else it response TokenObject with all null
     *
     * @param authToken
     * @param authTokenType
     * @param authTokenTime
     * @param stateCookie
     * @param refreshToken
     * @param refreshTokenTime
     *
     * @returns AuthKitStateInterface
     *
     */
    TokenObject.prototype.checkTokenExist = function (authToken, authTokenType, authTokenTime, stateCookie, refreshToken, refreshTokenTime) {
        if (!!authToken && !!authTokenType && !!authTokenTime && !!stateCookie) {
            var expiresAt = new Date(authTokenTime);
            try {
                var authState = JSON.parse(stateCookie);
                var obj = {
                    auth: {
                        token: authToken,
                        type: authTokenType,
                        expiresAt: expiresAt,
                    },
                    userState: authState,
                    isSignIn: true,
                    isUsingRefreshToken: this.isUsingRefreshToken,
                    refresh: undefined,
                };
                if (this.isUsingRefreshToken && !!refreshToken && !!refreshTokenTime) {
                    var refreshTokenExpiresAt = new Date(refreshTokenTime);
                    return __assign(__assign({}, obj), { refresh: {
                            token: refreshToken,
                            expiresAt: refreshTokenExpiresAt,
                        } });
                }
                else {
                    return __assign(__assign({}, obj), { refresh: null });
                }
            }
            catch (e) {
                return {
                    auth: null,
                    refresh: null,
                    userState: null,
                    isUsingRefreshToken: this.isUsingRefreshToken,
                    isSignIn: false,
                };
            }
        }
        else {
            return {
                auth: null,
                refresh: null,
                userState: null,
                isUsingRefreshToken: this.isUsingRefreshToken,
                isSignIn: false,
            };
        }
    };
    /**
     * Sync Auth Tokens on time of login and logout
     *
     * Set the New Cookies or new Localstorage on login
     * Or Remove the old Cookies or old Localstorage on logout
     *
     * @param authState
     */
    TokenObject.prototype.syncTokens = function (authState) {
        if (authState.auth) {
            if (this.isUsingRefreshToken && authState.refresh) {
                this.setToken(authState.auth.token, authState.auth.type, authState.refresh.token, authState.refresh.expiresAt, authState.auth.expiresAt, authState.userState);
            }
            else {
                this.setToken(authState.auth.token, authState.auth.type, null, null, authState.auth.expiresAt, authState.userState);
            }
        }
        else {
            this.removeToken();
        }
    };
    /**
     * Set Cookies or localstorage on login
     *
     * @param authToken
     * @param authTokenType
     * @param refreshToken
     * @param refreshTokenExpiresAt
     * @param expiresAt
     * @param authState
     */
    TokenObject.prototype.setToken = function (authToken, authTokenType, refreshToken, refreshTokenExpiresAt, expiresAt, authState) {
        if (this.authStorageType === 'cookie') {
            this.setCookieToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);
        }
        else {
            this.setLSToken_(authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState);
        }
    };
    /**
     *
     * Set Cookie on time of Login
     *
     * @param authToken
     * @param authTokenType
     * @param refreshToken
     * @param expiresAt
     * @param refreshTokenExpiresAt
     * @param authState
     */
    TokenObject.prototype.setCookieToken_ = function (authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {
        Cookies.set(this.authStorageName, authToken, {
            expires: expiresAt,
            domain: this.cookieDomain,
            secure: this.cookieSecure,
        });
        Cookies.set(this.authStorageTypeName, authTokenType, {
            expires: expiresAt,
            domain: this.cookieDomain,
            secure: this.cookieSecure,
        });
        Cookies.set(this.authTimeStorageName, expiresAt.toISOString(), {
            expires: expiresAt,
            domain: this.cookieDomain,
            secure: this.cookieSecure,
        });
        if (authState) {
            Cookies.set(this.stateStorageName, JSON.stringify(authState), {
                expires: expiresAt,
                domain: this.cookieDomain,
                secure: this.cookieSecure,
            });
        }
        if (this.isUsingRefreshToken && !!this.refreshTokenName &&
            !!refreshToken) {
            Cookies.set(this.refreshTokenName, refreshToken, {
                expires: expiresAt,
                domain: this.cookieDomain,
                secure: this.cookieSecure,
            });
        }
        if (this.isUsingRefreshToken && !!this.refreshTokenTimeName &&
            !!refreshTokenExpiresAt) {
            Cookies.set(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString(), {
                expires: expiresAt,
                domain: this.cookieDomain,
                secure: this.cookieSecure,
            });
        }
    };
    /**
     * Set LocalStorage at the time of Login
     *
     * @param authToken
     * @param authTokenType
     * @param refreshToken
     * @param expiresAt
     * @param refreshTokenExpiresAt
     * @param authState
     */
    TokenObject.prototype.setLSToken_ = function (authToken, authTokenType, refreshToken, expiresAt, refreshTokenExpiresAt, authState) {
        localStorage.setItem(this.authStorageName, authToken);
        localStorage.setItem(this.authStorageTypeName, authTokenType);
        localStorage.setItem(this.authTimeStorageName, expiresAt.toISOString());
        if (authState) {
            localStorage.setItem(this.stateStorageName, JSON.stringify(authState));
        }
        if (this.isUsingRefreshToken && !!this.refreshTokenName &&
            !!refreshToken) {
            localStorage.setItem(this.refreshTokenName, refreshToken);
        }
        if (this.isUsingRefreshToken && !!this.refreshTokenTimeName &&
            !!refreshTokenExpiresAt) {
            localStorage.setItem(this.refreshTokenTimeName, refreshTokenExpiresAt.toISOString());
        }
    };
    /**
     * Remove Tokens on time of Logout
     */
    TokenObject.prototype.removeToken = function () {
        if (this.authStorageType === 'cookie') {
            this.removeCookieToken_();
        }
        else {
            this.removeLSToken_();
        }
    };
    /**
     * Remove Token from Cookies
     */
    TokenObject.prototype.removeCookieToken_ = function () {
        Cookies.remove(this.authStorageName, {
            domain: this.cookieDomain,
            secure: this.cookieSecure,
        });
        Cookies.remove(this.authTimeStorageName, {
            domain: this.cookieDomain,
            secure: this.cookieSecure,
        });
        Cookies.remove(this.authStorageTypeName, {
            domain: this.cookieDomain,
            secure: this.cookieSecure,
        });
        Cookies.remove(this.stateStorageName, {
            domain: this.cookieDomain,
            secure: this.cookieSecure,
        });
        if (this.isUsingRefreshToken && !!this.refreshTokenName) {
            Cookies.remove(this.refreshTokenName, {
                domain: this.cookieDomain,
                secure: this.cookieSecure,
            });
        }
        if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {
            Cookies.remove(this.refreshTokenTimeName, {
                domain: this.cookieDomain,
                secure: this.cookieSecure,
            });
        }
    };
    /**
     * Remove Token from LocalStorage
     */
    TokenObject.prototype.removeLSToken_ = function () {
        localStorage.removeItem(this.authStorageName);
        localStorage.removeItem(this.authTimeStorageName);
        localStorage.removeItem(this.authStorageTypeName);
        localStorage.removeItem(this.stateStorageName);
        if (this.isUsingRefreshToken && !!this.refreshTokenName) {
            localStorage.removeItem(this.refreshTokenName);
        }
        if (this.isUsingRefreshToken && !!this.refreshTokenTimeName) {
            localStorage.removeItem(this.refreshTokenTimeName);
        }
    };
    return TokenObject;
}());

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Actions for useReducer
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ActionType;
(function (ActionType) {
    ActionType[ActionType["SignIn"] = 0] = "SignIn";
    ActionType[ActionType["SignOut"] = 1] = "SignOut";
    ActionType[ActionType["RefreshToken"] = 2] = "RefreshToken";
})(ActionType || (ActionType = {}));

/**
 * Auth Reducer
 * Used in auth state
 * @param state
 * @param action
 */
function authReducer(state, action) {
    switch (action.type) {
        case ActionType.SignIn:
            return __assign(__assign({}, state), { auth: action.payload.auth, refresh: action.payload.refresh, userState: action.payload.userState, isSignIn: true });
        case ActionType.SignOut:
            return __assign(__assign({}, state), { auth: null, refresh: null, userState: null, isSignIn: false });
        case ActionType.RefreshToken:
            if (state.isSignIn && state.auth && state.refresh) {
                return __assign(__assign({}, state), { auth: {
                        token: action.payload.newAuthToken ?
                            action.payload.newAuthToken : state.auth.token,
                        type: state.auth.type,
                        expiresAt: action.payload.newAuthTokenExpireIn ?
                            new Date(new Date().getTime() +
                                action.payload.newAuthTokenExpireIn * 60 * 1000) :
                            state.auth.expiresAt,
                    }, refresh: {
                        token: action.payload.newRefreshToken ?
                            action.payload.newRefreshToken : state.refresh.token,
                        expiresAt: action.payload.newRefreshTokenExpiresIn ?
                            new Date(new Date().getTime() +
                                action.payload.newRefreshTokenExpiresIn * 60 * 1000) :
                            state.refresh.expiresAt,
                    }, userState: action.payload.newAuthUserState ?
                        action.payload.newAuthUserState : state.userState });
            }
            else {
                return state;
            }
    }
}
// Helper functions
/**
 * used to make sign in
 * @param signInParams
 */
function doSignIn(signInParams) {
    return ({
        type: ActionType.SignIn,
        payload: signInParams,
    });
}
/**
 * used to refresh the Token
 * @param refreshTokenParam
 */
function doRefresh(refreshTokenParam) {
    return ({
        type: ActionType.RefreshToken,
        payload: refreshTokenParam,
    });
}
/**
 * Used to make sign out
 */
function doSignOut() {
    return ({
        type: ActionType.SignOut,
    });
}

/*
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * React useInterval Hook
 * Used to integrate the power of setInterval seamlessly
 *
 * @param callback - The callback function
 * @param delay - The amount of delay in minutes.
 *
 * @returns the ref of setInterval
 */
function useInterval(callback, delay) {
    var savedCallback = React__namespace.useRef(callback);
    var intervalRef = React__namespace.useRef(null);
    // Remember the latest callback if it changes.
    React__namespace.useEffect(function () {
        savedCallback.current = callback;
    }, [callback]);
    // Set up the interval.
    React__namespace.useEffect(function () {
        var tick = function () { return savedCallback.current(); };
        if (typeof delay === 'number') {
            intervalRef.current = window.setInterval(tick, delay * 60 * 1000);
        }
        return function () {
            if (intervalRef.current) {
                window.clearTimeout(intervalRef.current);
            }
        };
    }, [delay]);
    return intervalRef;
}

/**
 * AuthProvider - The Authentication Context Provider
 *
 * @param children
 * @param authStorageName
 * @param cookieDomain
 * @param cookieSecure
 *
 * @return Functional Component
 */
var AuthProvider = function (_a) {
    var children = _a.children, authType = _a.authType, authName = _a.authName, cookieDomain = _a.cookieDomain, cookieSecure = _a.cookieSecure, refresh = _a.refresh;
    if (authType === 'cookie') {
        if (!cookieDomain) {
            throw new Error('authType \'cookie\' ' +
                'requires \'cookieDomain\' and \'cookieSecure\' ' +
                'props in AuthProvider');
        }
    }
    var refreshTokenName = refresh ? "".concat(authName, "_refresh") : null;
    var tokenObject = new TokenObject(authName, authType, refreshTokenName, cookieDomain, cookieSecure);
    var _b = React__namespace.useReducer(authReducer, tokenObject.initialToken()), authState = _b[0], dispatch = _b[1];
    if (refresh) {
        useInterval(function () {
            var _a, _b, _c, _d;
            refresh
                .refreshApiCallback({
                authToken: (_a = authState.auth) === null || _a === void 0 ? void 0 : _a.token,
                authTokenExpireAt: (_b = authState.auth) === null || _b === void 0 ? void 0 : _b.expiresAt,
                authUserState: authState.userState,
                refreshToken: (_c = authState.refresh) === null || _c === void 0 ? void 0 : _c.token,
                refreshTokenExpiresAt: (_d = authState.refresh) === null || _d === void 0 ? void 0 : _d.expiresAt,
            })
                .then(function (result) {
                // IF the API call is successful then refresh the AUTH state
                if (result.isSuccess) {
                    // store the new value using the state update
                    dispatch(doRefresh(result));
                }
            });
        }, authState.isSignIn ? refresh.interval : null);
    }
    React__namespace.useEffect(function () {
        tokenObject.syncTokens(authState);
    }, [authState]);
    return (React__namespace.createElement(AuthContext.Provider, { value: { authState: authState, dispatch: dispatch } }, children));
};

/*
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * This function doesn't really "do anything" at runtime,
 * it's just help to organize the code base
 * Use this function to create the refresh token system
 */
function createRefresh(param) {
    return param;
}

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview PrivateRoute component
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var RequireAuth = function (_a) {
    var children = _a.children, loginPath = _a.loginPath;
    var context = React__namespace.useContext(AuthContext);
    if (context === null) {
        throw new Error('Auth Provider is missing. ' +
            'Please add the AuthProvider before Router');
    }
    var isAuth = function () {
        if (context.authState.auth &&
            (new Date(context.authState.auth.expiresAt) > new Date())) {
            return true;
        }
        else {
            context.dispatch(doSignOut());
            return false;
        }
    };
    var location = reactRouterDom.useLocation();
    if (!isAuth()) {
        // Redirect them to the /login page, but save the current location they were
        // trying to go to when they were redirected. This allows us to send them
        // along to that page after they login, which is a nicer user experience
        // than dropping them off on the home page.
        return React__namespace.createElement(reactRouterDom.Navigate, { to: loginPath, state: { from: location }, replace: true });
    }
    return children;
};

/**
 *@author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 *@fileoverview Sign In functionality <hook>
 *@copyright Arkadip Bhattacharya 2020
 *@license Apache-2.0
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *@function
 *@name useSignIn
 *@description Authentication SignIn Hook
 *@returns - Sign In function
 */
function useSignIn() {
    var context = React__namespace.useContext(AuthContext);
    if (context === null) {
        throw new Error('Auth Provider is missing. ' +
            'Please add the AuthProvider before Router');
    }
    return function (signInConfig) {
        var token = signInConfig.token, tokenType = signInConfig.tokenType, authState = signInConfig.authState, expiresIn = signInConfig.expiresIn, refreshToken = signInConfig.refreshToken, refreshTokenExpireIn = signInConfig.refreshTokenExpireIn;
        var expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);
        if (context.authState.isUsingRefreshToken) {
            // Using the power of refresh token
            if (!!refreshToken && !!refreshTokenExpireIn) {
                // refresh token params are provided
                // sign in with refresh token
                var refreshTokenExpireAt = new Date(new Date().getTime() + refreshTokenExpireIn * 60 * 1000);
                context.dispatch(doSignIn({
                    auth: {
                        token: token,
                        type: tokenType,
                        expiresAt: expTime,
                    },
                    userState: authState ? authState : null,
                    refresh: {
                        token: refreshToken,
                        expiresAt: refreshTokenExpireAt,
                    },
                }));
                return true;
            }
            else {
                // refresh token params are not provided
                // throw an error
                throw new Error('Make sure you given "refreshToken" and  ' +
                    '"refreshTokenExpireIn" parameter');
            }
        }
        else {
            // Not using refresh token
            if (!!refreshToken && !!refreshTokenExpireIn) {
                // params are not expected but provided
                // throw an error
                throw new Error('The app doesn\'t implement \'refreshToken\' ' +
                    'feature.\nSo you have to implement refresh token feature ' +
                    'from \'AuthProvider\' before using it.');
            }
            else {
                // sign in without the refresh token
                context.dispatch(doSignIn({
                    auth: {
                        token: token,
                        type: tokenType,
                        expiresAt: expTime,
                    },
                    userState: authState ? authState : null,
                    refresh: null,
                }));
                return true;
            }
        }
    };
}

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Sign Out functionality <Hook>
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
  *@public
  *@function
  *@name useSignOut
  *@description Sign out Hook
  */
function useSignOut() {
    /**
     *A constant c.
     *@kind constant
     */
    var context = React__namespace.useContext(AuthContext);
    if (context === null) {
        throw new Error('Auth Provider is missing. ' +
            'Please add the AuthProvider before Router');
    }
    return function () {
        try {
            if (context) {
                context.dispatch(doSignOut());
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    };
}

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Authentication User <hook>
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Auth State Hook
 *
 * @returns - Auth State Function
 */
function useAuthUser() {
    var context = React__namespace.useContext(AuthContext);
    if (context === null) {
        throw new Error('Auth Provider is missing. ' +
            'Please add the AuthProvider before Router');
    }
    return function () {
        return context.authState.auth ?
            context.authState.userState : null;
    };
}

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Authentication header <hook>
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 *
 */
function useAuthHeader() {
    var c = React__namespace.useContext(AuthContext);
    if (c === null) {
        throw new Error('Auth Provider is missing. ' +
            'Please add the AuthProvider before Router');
    }
    return function () {
        if (c.authState.auth) {
            return "".concat(c.authState.auth.type, " ").concat(c.authState.auth.token);
        }
        else {
            return "";
        }
    };
}

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Authentication status <hook>
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
  *@function
  *@name useIsAuthenticated
  *@description check weather user is authenticated or not
  */
function useIsAuthenticated() {
    var context = React__namespace.useContext(AuthContext);
    if (context === null) {
        throw new Error('Auth Provider is missing. ' +
            'Please add the AuthProvider before Router');
    }
    return function () {
        if (context.authState.auth) {
            if (new Date(context.authState.auth.expiresAt) > new Date()) {
                return true;
            }
            else {
                context.dispatch(doSignOut());
                return false;
            }
        }
        else {
            return false;
        }
    };
}

/**
 * @public
 * @function
 * @name withSignIn
 * @description Inject sign in functionality inside the Component's Prop
 * @param Component
 */
function withSignIn(Component) {
    return function (props) {
        return (React__namespace.createElement(AuthContextConsumer, null, function (c) {
            if (c === null) {
                throw new Error('Auth Provider is missing. ' +
                    'Please add the AuthProvider before Router');
            }
            var signIn = function (signInConfig) {
                var token = signInConfig.token, tokenType = signInConfig.tokenType, authState = signInConfig.authState, expiresIn = signInConfig.expiresIn, refreshToken = signInConfig.refreshToken, refreshTokenExpireIn = signInConfig.refreshTokenExpireIn;
                var expTime = new Date(new Date().getTime() + expiresIn * 60 * 1000);
                if (c.authState.isUsingRefreshToken) {
                    // Using the power of refresh token
                    if (!!refreshToken && !!refreshTokenExpireIn) {
                        // refresh token params are provided
                        // sign in with refresh token
                        var refreshTokenExpireAt = new Date(new Date().getTime() +
                            refreshTokenExpireIn * 60 * 1000);
                        c.dispatch(doSignIn({
                            auth: {
                                token: token,
                                type: tokenType,
                                expiresAt: expTime,
                            },
                            userState: authState ? authState : null,
                            refresh: {
                                token: refreshToken,
                                expiresAt: refreshTokenExpireAt,
                            },
                        }));
                        return true;
                    }
                    else {
                        // refresh token params are not provided
                        // throw an error
                        throw new Error('Make sure you given "refreshToken" and  ' +
                            '"refreshTokenExpireIn" parameter');
                    }
                }
                else {
                    // Not using refresh token
                    if (!!refreshToken && !!refreshTokenExpireIn) {
                        // params are not expected but provided
                        // throw an error
                        throw new Error('The app doesn\'t implement \'refreshToken\'' +
                            ' feature.\n So you have to implement refresh token feature' +
                            ' from \'AuthProvider\' before using it.');
                    }
                    else {
                        // sign in without the refresh token
                        c.dispatch(doSignIn({
                            auth: {
                                token: token,
                                type: tokenType,
                                expiresAt: expTime,
                            },
                            userState: authState ? authState : null,
                            refresh: null,
                        }));
                        return true;
                    }
                }
            };
            return React__namespace.createElement(Component, __assign({}, props, { signIn: signIn }));
        }));
    };
}

/**
 * @public
 * @function
 * @name withSignOut
 * @description Inject sign Out functionality inside the Component's Prop
 * @param Component
 */
function withSignOut(Component) {
    return function (props) {
        return (React__namespace.createElement(AuthContextConsumer, null, function (c) {
            if (c === null) {
                throw new Error('Auth Provider is missing. ' +
                    'Please add the AuthProvider before Router');
            }
            var signOut = function () {
                try {
                    if (c) {
                        c.dispatch(doSignOut());
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                catch (e) {
                    return false;
                }
            };
            return React__namespace.createElement(Component, __assign({}, props, { signOut: signOut }));
        }));
    };
}

/**
 * @function
 * @name withAuthUser
 * @description Inject Authenticated User's state inside the Component's Prop
 * @param Component
 */
function withAuthUser(Component) {
    return function (props) {
        return (React__namespace.createElement(AuthContextConsumer, null, function (context) {
            if (context === null) {
                throw new Error('Auth Provider is missing. ' +
                    'Please add the AuthProvider before Router');
            }
            if (context.authState.auth) {
                return (React__namespace.createElement(Component, __assign({}, props, { authState: context.authState.userState })));
            }
            else {
                return (React__namespace.createElement(Component, __assign({}, props, { authState: null })));
            }
        }));
    };
}

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Authentication header <Higher Order Component>
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @public
 * @function
 * @name withAuthHeader
 * @description Inject Authentication Header inside the Component's Prop
 * @param Component - React Component
 */
function withAuthHeader(Component) {
    return function (props) {
        return (React__namespace.createElement(AuthContextConsumer, null, function (c) {
            if (c === null) {
                throw new Error('Auth Provider is missing. ' +
                    'Please add the AuthProvider before Router');
            }
            if (c.authState.auth) {
                return (React__namespace.createElement(Component, __assign({}, props, { authHeader: "".concat(c.authState.auth.type, " ").concat(c.authState.auth.token) })));
            }
            else {
                return React__namespace.createElement(Component, __assign({}, props, { authHeader: "" }));
            }
        }));
    };
}

/**
 * @author Arkadip Bhattacharya <in2arkadipb13@gmail.com>
 * @fileoverview Authentication status <Higher Order Component>
 * @copyright Arkadip Bhattacharya 2020
 *
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @public
 * @function
 * @name withIsAuthenticated
 * @description Inject Authentication status inside the Component's Prop
 * @param Component
 */
function withIsAuthenticated(Component) {
    return function (props) {
        return (React__namespace.createElement(AuthContextConsumer, null, function (c) {
            if (c === null) {
                throw new Error('Auth Provider is missing. ' +
                    'Please add the AuthProvider before Router');
            }
            if (c.authState.auth) {
                if (new Date(c.authState.auth.expiresAt) > new Date()) {
                    return React__namespace.createElement(Component, __assign({}, props, { isAuth: true }));
                }
                else {
                    c.dispatch(doSignOut());
                    return React__namespace.createElement(Component, __assign({}, props, { isAuth: false }));
                }
            }
            else {
                return React__namespace.createElement(Component, __assign({}, props, { isAuth: false }));
            }
        }));
    };
}

/*
 * Copyright 2020 Arkadip Bhattacharya
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * last updated 25th August 2021
 */
// Default prop for AuthProvider
AuthProvider.defaultProps = {
    cookieDomain: window.location.hostname,
    cookieSecure: window.location.protocol === 'https:',
};

exports.AuthProvider = AuthProvider;
exports.RequireAuth = RequireAuth;
exports.createRefresh = createRefresh;
exports.useAuthHeader = useAuthHeader;
exports.useAuthUser = useAuthUser;
exports.useIsAuthenticated = useIsAuthenticated;
exports.useSignIn = useSignIn;
exports.useSignOut = useSignOut;
exports.withAuthHeader = withAuthHeader;
exports.withAuthUser = withAuthUser;
exports.withIsAuthenticated = withIsAuthenticated;
exports.withSignIn = withSignIn;
exports.withSignOut = withSignOut;
//# sourceMappingURL=index.js.map
